toc()
tic()
sample_size=98
my_grid <- seq(from=0,to=1,length.out=5)
mu <- c(0,0,0)
sigma <- rbind(c(1,0.6,0.6), c(0.6,1,0.6), c(0.6,0.6,1))
mltvnorm3 <- mvtnorm::rmvnorm(sample_size, mu, sigma)
y=t(apply(mltvnorm3,1,function(x) x[1] + x[2]*cos(6*pi*my_grid) + x[3]*sin(6*pi*my_grid)))
x=mltvnorm3 + mvtnorm::rmvt(sample_size, diag(length(mu)))## add noise
n0=10
x0 = mvtnorm::rmvt(n0, diag(length(mu)))
fun=mean_multi()
fun=lm_multi()
fun=elastic.funs()
B=5
final.multi=conformal.multidim.msplit(x=x[1:40,],y=y[1:40,], x0=x0[1:3,],
fun$train.fun, fun$predict.fun,
alpha=0.1,
split=NULL, seed=FALSE, randomized=FALSE,seed_beta=FALSE,
verbose=FALSE, training_size=NULL,s_type="st-dev",B=B,lambda=0,
score="l2")
toc()
tic()
sample_size=98
my_grid <- seq(from=0,to=1,length.out=5)
mu <- c(0,0,0)
sigma <- rbind(c(1,0.6,0.6), c(0.6,1,0.6), c(0.6,0.6,1))
mltvnorm3 <- mvtnorm::rmvnorm(sample_size, mu, sigma)
y=t(apply(mltvnorm3,1,function(x) x[1] + x[2]*cos(6*pi*my_grid) + x[3]*sin(6*pi*my_grid)))
x=mltvnorm3 + mvtnorm::rmvt(sample_size, diag(length(mu)))## add noise
n0=10
x0 = mvtnorm::rmvt(n0, diag(length(mu)))
fun=mean_multi()
fun=lm_multi()
fun=elastic.funs()
B=5
final.multi=conformal.multidim.msplit(x=x[1:40,],y=y[1:40,], x0=x0[1,],
fun$train.fun, fun$predict.fun,
alpha=0.1,
split=NULL, seed=FALSE, randomized=FALSE,seed_beta=FALSE,
verbose=FALSE, training_size=NULL,s_type="st-dev",B=B,lambda=0,
score="l2")
toc()
tic()
sample_size=98
my_grid <- seq(from=0,to=1,length.out=5)
mu <- c(0,0,0)
sigma <- rbind(c(1,0.6,0.6), c(0.6,1,0.6), c(0.6,0.6,1))
mltvnorm3 <- mvtnorm::rmvnorm(sample_size, mu, sigma)
y=t(apply(mltvnorm3,1,function(x) x[1] + x[2]*cos(6*pi*my_grid) + x[3]*sin(6*pi*my_grid)))
x=mltvnorm3 + mvtnorm::rmvt(sample_size, diag(length(mu)))## add noise
n0=10
x0 = mvtnorm::rmvt(n0, diag(length(mu)))
fun=mean_multi()
fun=lm_multi()
fun=elastic.funs()
B=5
final.multi=conformal.multidim.msplit(x=x[1:40,],y=y[1:40,], x0=x0[1:2,],
fun$train.fun, fun$predict.fun,
alpha=0.1,
split=NULL, seed=FALSE, randomized=FALSE,seed_beta=FALSE,
verbose=FALSE, training_size=NULL,s_type="st-dev",B=B,lambda=0,
score="l2")
toc()
tic()
sample_size=98
my_grid <- seq(from=0,to=1,length.out=5)
mu <- c(0,0,0)
sigma <- rbind(c(1,0.6,0.6), c(0.6,1,0.6), c(0.6,0.6,1))
mltvnorm3 <- mvtnorm::rmvnorm(sample_size, mu, sigma)
y=t(apply(mltvnorm3,1,function(x) x[1] + x[2]*cos(6*pi*my_grid) + x[3]*sin(6*pi*my_grid)))
x=mltvnorm3 + mvtnorm::rmvt(sample_size, diag(length(mu)))## add noise
n0=10
x0 = mvtnorm::rmvt(n0, diag(length(mu)))
fun=mean_multi()
fun=lm_multi()
fun=elastic.funs()
B=5
final.multi=conformal.multidim.msplit(x=x[1:35,],y=y[1:35,], x0=x0[1:2,],
fun$train.fun, fun$predict.fun,
alpha=0.1,
split=NULL, seed=FALSE, randomized=FALSE,seed_beta=FALSE,
verbose=FALSE, training_size=NULL,s_type="st-dev",B=B,lambda=0,
score="l2")
toc()
tic()
sample_size=98
my_grid <- seq(from=0,to=1,length.out=5)
mu <- c(0,0,0)
sigma <- rbind(c(1,0.6,0.6), c(0.6,1,0.6), c(0.6,0.6,1))
mltvnorm3 <- mvtnorm::rmvnorm(sample_size, mu, sigma)
y=t(apply(mltvnorm3,1,function(x) x[1] + x[2]*cos(6*pi*my_grid) + x[3]*sin(6*pi*my_grid)))
x=mltvnorm3 + mvtnorm::rmvt(sample_size, diag(length(mu)))## add noise
n0=10
x0 = mvtnorm::rmvt(n0, diag(length(mu)))
fun=mean_multi()
fun=lm_multi()
fun=elastic.funs()
B=4
final.multi=conformal.multidim.msplit(x=x[1:35,],y=y[1:35,], x0=as.matrix(x0[1,]),
fun$train.fun, fun$predict.fun,
alpha=0.1,
split=NULL, seed=FALSE, randomized=FALSE,seed_beta=FALSE,
verbose=FALSE, training_size=NULL,s_type="st-dev",B=B,lambda=0,
score="l2")
toc()
tic()
sample_size=98
my_grid <- seq(from=0,to=1,length.out=5)
mu <- c(0,0,0)
sigma <- rbind(c(1,0.6,0.6), c(0.6,1,0.6), c(0.6,0.6,1))
mltvnorm3 <- mvtnorm::rmvnorm(sample_size, mu, sigma)
y=t(apply(mltvnorm3,1,function(x) x[1] + x[2]*cos(6*pi*my_grid) + x[3]*sin(6*pi*my_grid)))
x=mltvnorm3 + mvtnorm::rmvt(sample_size, diag(length(mu)))## add noise
n0=10
x0 = mvtnorm::rmvt(n0, diag(length(mu)))
fun=mean_multi()
fun=lm_multi()
fun=elastic.funs()
B=4
final.multi=conformal.multidim.msplit(x=x[1:35,1:2],y=y[1:35,], x0=as.x0[1:2,1:2],
fun$train.fun, fun$predict.fun,
alpha=0.1,
split=NULL, seed=FALSE, randomized=FALSE,seed_beta=FALSE,
verbose=FALSE, training_size=NULL,s_type="st-dev",B=B,lambda=0,
score="l2")
toc()
tic()
sample_size=98
my_grid <- seq(from=0,to=1,length.out=5)
mu <- c(0,0,0)
sigma <- rbind(c(1,0.6,0.6), c(0.6,1,0.6), c(0.6,0.6,1))
mltvnorm3 <- mvtnorm::rmvnorm(sample_size, mu, sigma)
y=t(apply(mltvnorm3,1,function(x) x[1] + x[2]*cos(6*pi*my_grid) + x[3]*sin(6*pi*my_grid)))
x=mltvnorm3 + mvtnorm::rmvt(sample_size, diag(length(mu)))## add noise
n0=10
x0 = mvtnorm::rmvt(n0, diag(length(mu)))
fun=mean_multi()
fun=lm_multi()
fun=elastic.funs()
B=4
final.multi=conformal.multidim.msplit(x=x[1:35,1:2],y=y[1:35,], x0=x0[1:2,1:2],
fun$train.fun, fun$predict.fun,
alpha=0.1,
split=NULL, seed=FALSE, randomized=FALSE,seed_beta=FALSE,
verbose=FALSE, training_size=NULL,s_type="st-dev",B=B,lambda=0,
score="l2")
toc()
tic()
sample_size=98
my_grid <- seq(from=0,to=1,length.out=5)
mu <- c(0,0,0)
sigma <- rbind(c(1,0.6,0.6), c(0.6,1,0.6), c(0.6,0.6,1))
mltvnorm3 <- mvtnorm::rmvnorm(sample_size, mu, sigma)
y=t(apply(mltvnorm3,1,function(x) x[1] + x[2]*cos(6*pi*my_grid) + x[3]*sin(6*pi*my_grid)))
x=mltvnorm3 + mvtnorm::rmvt(sample_size, diag(length(mu)))## add noise
n0=10
x0 = mvtnorm::rmvt(n0, diag(length(mu)))
fun=mean_multi()
fun=lm_multi()
fun=elastic.funs()
B=4
final.multi=conformal.multidim.msplit(x=x[1:30,1:2],y=y[1:30,], x0=x0[1:2,1:2],
fun$train.fun, fun$predict.fun,
alpha=0.1,
split=NULL, seed=FALSE, randomized=FALSE,seed_beta=FALSE,
verbose=FALSE, training_size=NULL,s_type="st-dev",B=B,lambda=0,
score="l2")
toc()
tic()
sample_size=98
my_grid <- seq(from=0,to=1,length.out=5)
mu <- c(0,0,0)
sigma <- rbind(c(1,0.6,0.6), c(0.6,1,0.6), c(0.6,0.6,1))
mltvnorm3 <- mvtnorm::rmvnorm(sample_size, mu, sigma)
y=t(apply(mltvnorm3,1,function(x) x[1] + x[2]*cos(6*pi*my_grid) + x[3]*sin(6*pi*my_grid)))
x=mltvnorm3 + mvtnorm::rmvt(sample_size, diag(length(mu)))## add noise
n0=10
x0 = mvtnorm::rmvt(n0, diag(length(mu)))
fun=mean_multi()
fun=lm_multi()
fun=elastic.funs()
B=3
final.multi=conformal.multidim.msplit(x=x[1:30,1:2],y=y[1:30,], x0=x0[1:2,1:2],
fun$train.fun, fun$predict.fun,
alpha=0.1,
split=NULL, seed=FALSE, randomized=FALSE,seed_beta=FALSE,
verbose=FALSE, training_size=NULL,s_type="st-dev",B=B,lambda=0,
score="l2")
toc()
tic()
sample_size=98
my_grid <- seq(from=0,to=1,length.out=5)
mu <- c(0,0,0)
sigma <- rbind(c(1,0.6,0.6), c(0.6,1,0.6), c(0.6,0.6,1))
mltvnorm3 <- mvtnorm::rmvnorm(sample_size, mu, sigma)
y=t(apply(mltvnorm3,1,function(x) x[1] + x[2]*cos(6*pi*my_grid) + x[3]*sin(6*pi*my_grid)))
x=mltvnorm3 + mvtnorm::rmvt(sample_size, diag(length(mu)))## add noise
n0=10
x0 = mvtnorm::rmvt(n0, diag(length(mu)))
#fun=mean_multi()
fun=lm_multi()
#################################### FULL CONFORMAL
final.full=conformal.multidim.full(x[1:4,], y[1:4,1:2], x0[1:2,], fun$train.fun,
fun$predict.fun, score="l2",
num.grid.pts.dim=20, grid.factor=1.25,
verbose=FALSE)
ppp<-plot_multidim_full(final.full)
toc()
source("C:/Users/paolo/OneDrive/Desktop/Nuova cartella/conformalInference.multi/inst/examples/ex.full.R")
n = 4
x = mvtnorm::rmvnorm(n, rep(0,n))
x
n = 4
n0 = 2
x = mvtnorm::rmvnorm(n, rep(0,n))
my_grid <- seq(from=0,to=1,length.out=5)
y = t(apply(mltvnorm3,1,function(u) u[1] + u[2]*cos(6*pi*my_grid)))
x0 = mvtnorm::rmvt(n0,rep(0,n0))
fun=mean_multi()
#fun=lm_multi()
#################################### FULL CONFORMAL
final.full=conformal.multidim.full(x[1:4,], y[1:4,1:2], x0[1:2,], fun$train.fun,
fun$predict.fun, score="l2",
num.grid.pts.dim=10, grid.factor=1.25,
verbose=FALSE)
ppp<-plot_multidim_full(final.full)
n = 4
n0 = 2
p = 2
mu = rep(0,p)
x = mvtnorm::rmvnorm(n, mu)
my_grid <- seq(from=0,to=1,length.out=5)
y = t(apply(mltvnorm3,1,function(u) u[1] + u[2]*cos(6*pi*my_grid)))
x0 = mvtnorm::rmvt(n0,mu)
fun=mean_multi()
#fun=lm_multi()
#################################### FULL CONFORMAL
final.full=conformal.multidim.full(x[1:4,], y[1:4,1:2], x0[1:2,], fun$train.fun,
fun$predict.fun, score="l2",
num.grid.pts.dim=10, grid.factor=1.25,
verbose=FALSE)
ppp<-plot_multidim_full(final.full)
n = 4
n0 = 2
p = 2
mu = rep(0,p)
x = mvtnorm::rmvnorm(n, mu)
my_grid <- seq(from=0,to=1,length.out=5)
y = t(apply(mltvnorm3,1,function(u) u[1] + u[2]*cos(6*pi*my_grid)))
x0 = mvtnorm::rmvt(n0,mu)
fun=mean_multi()
#fun=lm_multi()
#################################### FULL CONFORMAL
final.full=conformal.multidim.full(x, y, x0, fun$train.fun,
fun$predict.fun, score="l2",
num.grid.pts.dim=10, grid.factor=1.25,
verbose=FALSE)
ppp<-plot_multidim_full(final.full)
y
n = 4
n0 = 2
p = 2
mu = rep(0,p)
x = mvtnorm::rmvnorm(n, mu)
my_grid <- seq(from=0,to=1,length.out=2)
y = t(apply(mltvnorm3,1,function(u) u[1] + u[2]*cos(6*pi*my_grid)))
x0 = mvtnorm::rmvt(n0,mu)
fun=mean_multi()
#fun=lm_multi()
n = 4
n0 = 2
p = 2
mu = rep(0,p)
x = mvtnorm::rmvnorm(n, mu)
my_grid <- seq(from=0,to=1,length.out=2)
y = t(apply(mltvnorm3,1,function(u) u[1] + u[2]*cos(6*pi*my_grid)))
x0 = mvtnorm::rmvt(n0,diag(mu))
fun=mean_multi()
#fun=lm_multi()
#################################### FULL CONFORMAL
final.full=conformal.multidim.full(x, y, x0, fun$train.fun,
fun$predict.fun, score="l2",
num.grid.pts.dim=10, grid.factor=1.25,
verbose=FALSE)
ppp<-plot_multidim_full(final.full)
help(rmvt)
n = 4
n0 = 2
p = 2
mu = rep(0,p)
x = mvtnorm::rmvnorm(n, mu)
my_grid <- seq(from=0,to=1,length.out=2)
y = t(apply(mltvnorm3,1,function(u) u[1] + u[2]*cos(6*pi*my_grid)))
x0 = mvtnorm::rmvt(n0,diag(rep(1,p)))
fun=mean_multi()
#fun=lm_multi()
#################################### FULL CONFORMAL
final.full=conformal.multidim.full(x, y, x0, fun$train.fun,
fun$predict.fun, score="l2",
num.grid.pts.dim=10, grid.factor=1.25,
verbose=FALSE)
ppp<-plot_multidim_full(final.full)
n = 4
n0 = 2
p = 2
mu = rep(0,p)
x = mvtnorm::rmvnorm(n, mu)
my_grid <- seq(from=0,to=1,length.out=2)
y = t(apply(mltvnorm3,1,function(u) u[1] + u[2]*cos(6*pi*my_grid)))
x0 = mvtnorm::rmvnorm(n0, mu)
fun=mean_multi()
#fun=lm_multi()
#################################### FULL CONFORMAL
final.full=conformal.multidim.full(x, y, x0, fun$train.fun,
fun$predict.fun, score="l2",
num.grid.pts.dim=10, grid.factor=1.25,
verbose=FALSE)
ppp<-plot_multidim_full(final.full)
x
y
n = 4
n0 = 2
p = 2
mu = rep(0,p)
x = mvtnorm::rmvnorm(n, mu)
my_grid <- seq(from=0,to=1,length.out=2)
y = t(apply(x,1,function(u) u[1] + u[2]*cos(6*pi*my_grid)))
x0 = mvtnorm::rmvnorm(n0, mu)
fun=mean_multi()
#fun=lm_multi()
#################################### FULL CONFORMAL
final.full=conformal.multidim.full(x, y, x0, fun$train.fun,
fun$predict.fun, score="l2",
num.grid.pts.dim=10, grid.factor=1.25,
verbose=FALSE)
ppp<-plot_multidim_full(final.full)
n = 4
n0 = 2
p = 2
mu = rep(0,p)
x = mvtnorm::rmvnorm(n, mu)
my_grid <- seq(from=0,to=1,length.out=2)
y = t(apply(x,1,function(u) u[1] + u[2]*cos(6*pi*my_grid)))
x0 = mvtnorm::rmvnorm(n0, mu)
fun=mean_multi()
#fun=lm_multi()
B=3
final.multi=conformal.multidim.msplit(x=x,y=y, x0=x0,
fun$train.fun, fun$predict.fun,
alpha=0.1,
split=NULL, seed=FALSE, randomized=FALSE,seed_beta=FALSE,
verbose=FALSE, training_size=NULL,s_type="st-dev",B=B,lambda=0,
score="l2")
n = 15
n0 = 2
p = 2
mu = rep(0,p)
x = mvtnorm::rmvnorm(n, mu)
my_grid <- seq(from=0,to=1,length.out=2)
y = t(apply(x,1,function(u) u[1] + u[2]*cos(6*pi*my_grid)))
x0 = mvtnorm::rmvnorm(n0, mu)
fun=mean_multi()
B=3
final.multi=conformal.multidim.msplit(x=x,y=y, x0=x0,
fun$train.fun, fun$predict.fun,
alpha=0.1,
split=NULL, seed=FALSE, randomized=FALSE,seed_beta=FALSE,
verbose=FALSE, training_size=NULL,s_type="st-dev",B=B,lambda=0,
score="l2")
n = 25
n0 = 2
p = 2
mu = rep(0,p)
x = mvtnorm::rmvnorm(n, mu)
my_grid <- seq(from=0,to=1,length.out=2)
y = t(apply(x,1,function(u) u[1] + u[2]*cos(6*pi*my_grid)))
x0 = mvtnorm::rmvnorm(n0, mu)
fun=mean_multi()
#fun=lm_multi()
B=3
final.multi=conformal.multidim.msplit(x=x,y=y, x0=x0,
fun$train.fun, fun$predict.fun,
alpha=0.1,
split=NULL, seed=FALSE, randomized=FALSE,seed_beta=FALSE,
verbose=FALSE, training_size=NULL,s_type="st-dev",B=B,lambda=0,
score="l2")
n = 33
n0 = 2
p = 2
mu = rep(0,p)
x = mvtnorm::rmvnorm(n, mu)
my_grid <- seq(from=0,to=1,length.out=2)
y = t(apply(x,1,function(u) u[1] + u[2]*cos(6*pi*my_grid)))
x0 = mvtnorm::rmvnorm(n0, mu)
fun=mean_multi()
#fun=lm_multi()
B=3
final.multi=conformal.multidim.msplit(x=x,y=y, x0=x0,
fun$train.fun, fun$predict.fun,
alpha=0.1,
split=NULL, seed=FALSE, randomized=FALSE,seed_beta=FALSE,
verbose=FALSE, training_size=NULL,s_type="st-dev",B=B,lambda=0,
score="l2")
# Update dependencies in DESCRIPTION
attachment::att_amend_desc() ## fa danni
# Run tests and examples
devtools::test()
# Check package as CRAN
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"))
# Check content
# remotes::install_github("ThinkR-open/checkhelper")
checkhelper::find_missing_tags()
stats::mad()
# Check content
# remotes::install_github("ThinkR-open/checkhelper")
checkhelper::find_missing_tags()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
# Check content
# remotes::install_github("ThinkR-open/checkhelper")
checkhelper::find_missing_tags()
# Check spelling
# usethis::use_spell_check()
spelling::spell_check_package()
# Check spelling
# usethis::use_spell_check()
spelling::spell_check_package()
# Check spelling
# usethis::use_spell_check()
spelling::spell_check_package()
# Check URL are correct
# remotes::install_github("r-lib/urlchecker")
urlchecker::url_check()
urlchecker::url_update()
# check on other distributions
# _rhub
devtools::check_rhub()
rhub::check_on_windows(check_args = "--force-multiarch")
rhub::check_on_solaris()
#checking package dependencies (2.5s)
#Package required but not available: ‘glmnet’ (MULTI)
# _win devel
devtools::check_win_devel()
# Check reverse dependencies
# remotes::install_github("r-lib/revdepcheck")
usethis::use_git_ignore("revdep/")
usethis::use_build_ignore("revdep/")
devtools::revdep()
library(revdepcheck)
# In another session
id <- rstudioapi::terminalExecute("Rscript -e 'revdepcheck::revdep_check(num_workers = 4)'")
rstudioapi::terminalKill(id)
# See outputs
revdep_details(revdep = "conformalInference.fd")
revdep_summary()                 # table of results by package
revdep_check()
library(conformalInference.multi)
# See outputs
revdep_details(revdep = "conformalInference.fd")
revdep_summary()                 # table of results by package
revdep_report() # in revdep/
# Clean up when on CRAN
revdep_reset()
# Add comments for CRAN
usethis::use_cran_comments(open = rlang::is_interactive())
# Check package as CRAN
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"))
# Check content
# remotes::install_github("ThinkR-open/checkhelper")
checkhelper::find_missing_tags()
roxygen2::roxygenise()
roxygen2::roxygenise()
checkhelper::find_missing_tags()
roxygen2::roxygenise()
checkhelper::find_missing_tags()
roxygen2::roxygenise()
devtools::load_all(".")
?conformalInference.multi
help(conformal.multidim.musplit)
help(conformal.multidim.msplit)
roxygen2::roxygenise()
roxygen2::roxygenise()
?conformalInference.multi
roxygen2::roxygenise()
?conformalInference.multi
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all(".")
?conformalInference.multi
roxygen2::roxygenise()
devtools::load_all(".")
?conformalInference.multi
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all(".")
?conformalInference.multi
roxygen2::roxygenise()
devtools::load_all(".")
roxygen2::roxygenise()
?conformalInference.multi
roxygen2::roxygenise()
roxygen2::roxygenise()
?conformalInference.multi
libary(goodpractice)
goodpractice::gp()
install.packages("goodpractice")
libary(goodpractice)
goodpractice::gp()
